## load libraries
library(raster)
library(maptools)
library(gam)
library(randomForest)
library(dismo)
library(gbm)
## set pathnames
path.root="/Users/amylauren/Google Drive/OccAmNat"
path.dat = paste(path.root, "/data files", sep="")
path.obj = paste(path.root, "/R objects", sep="")
path.fig = paste(path.root, "/figures", sep="")
path.cod = paste(path.root, "/R code", sep="")
setwd(path.obj)
for (i in 1:10) {
mod.lr = get(load(paste("LR.mod2.",i,".pseudo11.Rda", sep="")))
assign(paste("LR.mod2.",i, sep=""), mod.lr)
mod.gam = get(load(paste("GAM.mod4.",i,".pseudo11.Rda", sep="")))
assign(paste("GAM.mod4.",i, sep=""), mod.gam)
mod.rf = get(load(paste("RF.mod1.",i,".pseudo11.Rda", sep="")))
assign(paste("RF.mod1.",i, sep=""), mod.rf)
mod.brt = get(load(paste("BRT.mod4.",i,".pseudo11.Rda", sep="")))
assign(paste("BRT.mod4.",i, sep=""), mod.brt)
mod.max = get(load(paste("MAX.mod1.",i,".pseudo11.Rda", sep="")))
assign(paste("MAX.mod1.",i, sep=""), mod.max)
}
# load external and internal accuracy scores
ext.accs.lr = get(load("LR.mod2.extaccs.pseudo11.Rda")); cv.accs.lr <- get(load("LR.mod2.cvaccs.pseudo11.Rda")); accs.lr <- get(load("LR.mod2.accs.pseudo11.Rda"))
ext.accs.gam = get(load("GAM.mod4.extaccs.pseudo11.Rda")); cv.accs.gam = get(load("GAM.mod4.cvaccs.pseudo11.Rda")); accs.gam = get(load("GAM.mod4.accs.pseudo11.Rda"))
ext.accs.rf = get(load("RF.mod1.extaccs.pseudo11.Rda")); accs.rf = get(load("RF.mod1.accs.pseudo11.Rda"))
ext.accs.brt = get(load("BRT.mod4.extaccs.pseudo11.Rda")); cv.accs.brt = get(load("BRT.mod4.accs.pseudo11.Rda")); accs.brt = get(load("BRT.mod4.resubaccs.pseudo11.Rda"))
ext.accs.max = get(load("MAX.mod1.extaccs.pseudo11.Rda")); cv.accs.max = get(load("MAX.mod1.cvaccs.pseudo11.Rda")); accs.max = get(load("MAX.mod1.accs.pseudo11.Rda"))
lr.cuts = ext.accs.lr[ext.accs.lr$thresh=="SensSpec", "threshold"]
gam.cuts = ext.accs.gam[ext.accs.gam$thresh=="SensSpec", "threshold"]
rf.cuts = ext.accs.rf[ext.accs.rf$thresh=="SensSpec", "threshold"]
brt.cuts = ext.accs.brt[ext.accs.brt$thresh=="SensSpec", "threshold"]
max.cuts = ext.accs.max[ext.accs.max$thresh=="SensSpec", "threshold"]
cuts <- cbind(lr.cuts, gam.cuts, rf.cuts, brt.cuts, max.cuts)
## read in occupancy dataset + bioclim predictor variables
setwd(path.dat)
all <- read.csv("all.records.aug.31.csv") #includes occupancy dataset, cleaned herbarium records, and 20K pseudoabs drawn to match envir space of true absences
occ <- all[all$DATASET=="occ",] #pull out occupancy dataset
occ$bio3 = log(occ$bio3+0.5) #make needed ln-transforms of predictors
occ$bio10 = log(occ$bio10+0.5)
occ$bio12 = log(occ$bio12+0.5)
occ$bio14 = log(occ$bio14+0.5)
## read in regionally subset occupancy dataset (see file 'RCode_SplitDatabyEcoregion')
setwd(path.dat)
north = read.csv("north.csv")
center = read.csv("center.csv")
south = read.csv("south.csv")
## Get ready to split data into high, mid, and low elevation sets
## Don't actually split until after predictions are bound to occ
L.thresh = 400
H.thresh = 1200
## LR predictions
for (i in 1:10) {
mod = get(paste("LR.mod2.",i, sep=""))
LRprob = predict(mod, occ, type="response")
occ = cbind(occ, LRprob)
}
for (i in 1:10) {
mod = get(paste("LR.mod2.",i, sep=""))
LRprob = predict(mod, north, type="response")
north = cbind(north, LRprob)
}
for (i in 1:10) {
mod = get(paste("LR.mod2.",i, sep=""))
LRprob = predict(mod, center, type="response")
center = cbind(center, LRprob)
}
for (i in 1:10) {
mod = get(paste("LR.mod2.",i, sep=""))
LRprob = predict(mod, south, type="response")
south = cbind(south, LRprob)
}
## GAM predictions
## MUST load library gam for GAM prediction
library(gam)
for (i in 1:10) {
mod = get(paste("GAM.mod4.",i, sep=""))
GAMprob=predict(mod, occ, type="response")
occ = cbind(occ, GAMprob)
}
for (i in 1:10) {
mod = get(paste("GAM.mod4.",i, sep=""))
GAMprob=predict(mod, north, type="response")
north = cbind(north, GAMprob)
}
for (i in 1:10) {
mod = get(paste("GAM.mod4.",i, sep=""))
GAMprob=predict(mod, center, type="response")
center = cbind(center, GAMprob)
}
for (i in 1:10) {
mod = get(paste("GAM.mod4.",i, sep=""))
GAMprob=predict(mod, south, type="response")
south = cbind(south, GAMprob)
}
## RF predictions
## MUST load library randomForest for RF prediction
## use type="prob" to obtain probability values; index of 2 grabs prob of presence=1
library(randomForest)
for (i in 1:10) {
mod = get(paste("RF.mod1.",i, sep=""))
RFprob=predict(mod, occ, type="prob", fun=predict, index=2, overwrite=T)
occ = cbind(occ, RFprob[,2])
}
#names(occ)[96:105] = "RFprob"
for (i in 1:10) {
mod = get(paste("RF.mod1.",i, sep=""))
RFprob=predict(mod, north, type="prob", fun=predict, index=2, overwrite=T)
north = cbind(north, RFprob[,2])
}
#names(north)[96:105] = "RFprob"
for (i in 1:10) {
mod = get(paste("RF.mod1.",i, sep=""))
RFprob=predict(mod, center, type="prob", fun=predict, index=2, overwrite=T)
center = cbind(center, RFprob[,2])
}
#names(center)[96:105] = "RFprob"
for (i in 1:10) {
mod = get(paste("RF.mod1.",i, sep=""))
RFprob=predict(mod, south, type="prob", fun=predict, index=2, overwrite=T)
south = cbind(south, RFprob[,2])
}
## BRT predictions
## MUST load libraries gbm & dismo
library(dismo)
library(gbm)
for (i in 1:10) {
mod = get(paste("BRT.mod4.",i, sep=""))
BRTprob=predict(mod, occ, n.trees=mod$gbm.call$best.trees, type="response")
occ = cbind(occ, BRTprob)
}
for (i in 1:10) {
mod = get(paste("BRT.mod4.",i, sep=""))
BRTprob=predict(mod, north, n.trees=mod$gbm.call$best.trees, type="response")
north = cbind(north, BRTprob)
}
for (i in 1:10) {
mod = get(paste("BRT.mod4.",i, sep=""))
BRTprob=predict(mod, center, n.trees=mod$gbm.call$best.trees, type="response")
center = cbind(center, BRTprob)
}
for (i in 1:10) {
mod = get(paste("BRT.mod4.",i, sep=""))
BRTprob=predict(mod, south, n.trees=mod$gbm.call$best.trees, type="response")
south = cbind(south, BRTprob)
}
## MAX predictions
## MUST load library dismo; dependencies will auto load
## MUST have maxent.jar in /R/win-library/2.14/dismo/java/
## MUST have x64 java from http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html
## See:  MakingMAXENTWorkInR.pdf for further details
## use type="prob" to obtain probability values; index of 2 grabs prob of presence=1
library(dismo)
## Calculate averages
occ$LRave = NA
occ$GAMave = NA
occ$RFave = NA
occ$BRTave = NA
occ$MAXave = NA
occ$Ens1 = NA #average over all models
occ$Ens2 = NA #average excluding BRT
occ$Ens3 = NA #average of (semi)parametric models
for (i in 1:dim(occ)[1]) {
occ[i,"LRave"] = mean(c(occ[i,76],occ[i,77],occ[i,78],occ[i,79],occ[i,80],occ[i,81],occ[i,82],occ[i,83],occ[i,84],occ[i,85]))
occ[i,"GAMave"] = mean(c(occ[i,86],occ[i,87],occ[i,88],occ[i,89],occ[i,90],occ[i,91],occ[i,92],occ[i,93],occ[i,94],occ[i,95]))
occ[i,"RFave"] = mean(c(occ[i,96],occ[i,97],occ[i,98],occ[i,99],occ[i,100],occ[i,101],occ[i,102],occ[i,103],occ[i,104],occ[i,105]))
occ[i,"BRTave"] = mean(c(occ[i,106],occ[i,107],occ[i,108],occ[i,109],occ[i,110],occ[i,111],occ[i,112],occ[i,113],occ[i,114],occ[i,115]))
occ[i,"MAXave"] = mean(c(occ[i,116],occ[i,117],occ[i,118],occ[i,119],occ[i,120],occ[i,121],occ[i,122],occ[i,123],occ[i,124],occ[i,125]))
occ[i,"Ens1"] = mean(c(occ[i,"LRave"],occ[i,"GAMave"],occ[i,"RFave"],occ[i,"BRTave"]),occ[i,"MAXave"])
occ[i,"Ens2"] = mean(c(occ[i,"RFave"],occ[i,"BRTave"],occ[i,"MAXave"]))
occ[i,"Ens3"] = mean(c(occ[i,"LRave"],occ[i,"GAMave"]))
}
head(occ)
LRvec = c()
GAMvec = c()
RFvec = c()
BRTvec = c()
MAXvec = c()
for (i in 1:10) {
LRname = paste("LRprob",i,sep="")
LRvec[i] = LRname
GAMname = paste("GAMprob",i,sep="")
GAMvec[i] = GAMname
RFname = paste("RFprob",i,sep="")
RFvec[i] = RFname
BRTname = paste("BRTprob",i,sep="")
BRTvec[i] = BRTname
MAXname = paste("MAXprob",i,sep="")
MAXvec[i] = MAXname
}
names(occ)[76:85] = LRvec
names(occ)[86:95] = GAMvec
names(occ)[96:105] = RFvec
names(occ)[106:115] = BRTvec
names(occ)[116:125] = MAXvec
north$LRave = NA
north$GAMave = NA
north$RFave = NA
north$BRTave = NA
north$MAXave = NA
north$Ens1 = NA #average over all models
north$Ens2 = NA #average excluding BRT
north$Ens3 = NA #average of (semi)parametric models
for (i in 1:dim(north)[1]) {
north[i,"LRave"] = mean(c(north[i,86],north[i,77],north[i,78],north[i,79],north[i,80],north[i,81],north[i,82],north[i,83],north[i,84],north[i,85]))
north[i,"GAMave"] = mean(c(north[i,96],north[i,87],north[i,88],north[i,89],north[i,90],north[i,91],north[i,92],north[i,93],north[i,94],north[i,95]))
north[i,"RFave"] = mean(c(north[i,106],north[i,97],north[i,98],north[i,99],north[i,100],north[i,101],north[i,102],north[i,103],north[i,	104],north[i,105]))
north[i,"BRTave"] = mean(c(north[i,116],north[i,107],north[i,108],north[i,109],north[i,110],north[i,111],north[i,112],north[i,113],north[i,	114],north[i,115]))
north[i,"MAXave"] = mean(c(north[i,126],north[i,117],north[i,118],north[i,119],north[i,120],north[i,121],north[i,122],north[i,123],north[i,	124],north[i,125]))
north[i,"Ens1"] = mean(c(north[i,"LRave"],north[i,"GAMave"],north[i,"RFave"],north[i,"BRTave"],north[i,"MAXave"]))
north[i,"Ens2"] = mean(c(north[i,"RFave"],north[i,"BRTave"],north[i,"MAXave"]))
north[i,"Ens3"] = mean(c(north[i,"LRave"],north[i,"GAMave"]))
}
head(north)
names(north)[77:86] = LRvec
names(north)[87:96] = GAMvec
names(north)[97:106] = RFvec
names(north)[107:116] = BRTvec
names(north)[117:126] = MAXvec
center$LRave = NA
center$GAMave = NA
center$RFave = NA
center$BRTave = NA
center$MAXave = NA
center$Ens1 = NA #average over all models
center$Ens2 = NA #average excluding BRT
center$Ens3 = NA #average of (semi)parametric models
for (i in 1:dim(center)[1]) {
center[i,"LRave"] = mean(c(center[i,86],center[i,77],center[i,78],center[i,79],center[i,80],center[i,81],center[i,82],center[i,83],center[i,						84],center[i,85]))
center[i,"GAMave"] = mean(c(center[i,96],center[i,87],center[i,88],center[i,89],center[i,90],center[i,91],center[i,92],center[i,93],center[i,						94],center[i,95]))
center[i,"RFave"] = mean(c(center[i,106],center[i,97],center[i,98],center[i,99],center[i,100],center[i,101],center[i,102],center[i,103],center[i,104],center[i,105]))
center[i,"BRTave"] = mean(c(center[i,116],center[i,107],center[i,108],center[i,109],center[i,110],center[i,111],center[i,112],center[i,113],center[i,	114],center[i,115]))
center[i,"MAXave"] = mean(c(center[i,126],center[i,117],center[i,118],center[i,119],center[i,120],center[i,121],center[i,122],center[i,123],center[i,	124],center[i,125]))
center[i,"Ens1"] = mean(c(center[i,"LRave"],center[i,"GAMave"],center[i,"RFave"],center[i,"BRTave"],center[i,"MAXave"]))
center[i,"Ens2"] = mean(c(center[i,"RFave"],center[i,"BRTave"],center[i,"MAXave"]))
center[i,"Ens3"] = mean(c(center[i,"LRave"],center[i,"GAMave"]))
}
head(center)
names(center)[77:86] = LRvec
names(center)[87:96] = GAMvec
names(center)[97:106] = RFvec
names(center)[107:116] = BRTvec
names(center)[117:126] = MAXvec
south$LRave = NA
south$GAMave = NA
south$RFave = NA
south$BRTave = NA
south$MAXave = NA
south$Ens1 = NA #average over all models
south$Ens2 = NA #average excluding BRT
south$Ens3 = NA #average of (semi)parametric models
for (i in 1:dim(south)[1]) {
south[i,"LRave"] = mean(c(south[i,86],south[i,77],south[i,78],south[i,79],south[i,80],south[i,81],south[i,82],south[i,83],south[i,84],south[i,85]))
south[i,"GAMave"] = mean(c(south[i,96],south[i,87],south[i,88],south[i,89],south[i,90],south[i,91],south[i,92],south[i,93],south[i,94],south[i,95]))
south[i,"RFave"] = mean(c(south[i,106],south[i,97],south[i,98],south[i,99],south[i,100],south[i,101],south[i,102],south[i,103],south[i,	104],south[i,105]))
south[i,"BRTave"] = mean(c(south[i,116],south[i,107],south[i,108],south[i,109],south[i,110],south[i,111],south[i,112],south[i,113],south[i,	114],south[i,115]))
south[i,"MAXave"] = mean(c(south[i,126],south[i,117],south[i,118],south[i,119],south[i,120],south[i,121],south[i,122],south[i,123],south[i,	124],south[i,125]))
south[i,"Ens1"] = mean(c(south[i,"LRave"],south[i,"GAMave"],south[i,"RFave"],south[i,"BRTave"],south[i,"MAXave"]))
south[i,"Ens2"] = mean(c(south[i,"RFave"],south[i,"BRTave"],south[i,"MAXave"]))
south[i,"Ens3"] = mean(c(south[i,"LRave"],south[i,"GAMave"]))
}
head(south)
names(south)[77:86] = LRvec
names(south)[87:96] = GAMvec
names(south)[97:106] = RFvec
names(south)[107:116] = BRTvec
names(south)[117:126] = MAXvec
high <- occ[occ$Elevation > H.thresh,]
low <- occ[occ$Elevation < L.thresh,]
mid <- occ[occ$Elevation >= L.thresh & occ$Elevation <= H.thresh,]
## Split data for easier plotting
pres = occ[occ$PRESABS==1,]; dim(pres)
abs = occ[occ$PRESABS==0,]; dim(abs)
## Vector for making quadratic fitted lines vs latitude
pred.pres.lat = data.frame(Latitude = seq(min(pres$Latitude, na.rm=T), max(pres$Latitude, na.rm=T), by=0.2))
pred.abs.lat = data.frame(Latitude = seq(min(abs$Latitude, na.rm=T), max(abs$Latitude, na.rm=T), by=0.2))
## Polynomial regressions vs latitude
# LR models
LR.ave.pres.mod = lm(LRave ~ Latitude + I(Latitude^2), data=pres)
LR.ave.pres.pred = predict(LR.ave.pres.mod, pred.pres.lat, type="response")
LR.ave.abs.mod = lm(LRave ~ Latitude + I(Latitude^2), data=abs)
LR.ave.abs.pred = predict(LR.ave.abs.mod, pred.abs.lat, type="response")
summary(LR.ave.pres.mod)
View(north)
View(north)
## Polynomial regressions vs latitude
# LR models
LR.ave.pres.mod = lm(LRave ~ Latitude + I(Latitude^2), data=pres)
LR.ave.pres.pred = predict(LR.ave.pres.mod, pred.pres.lat, type="response")
LR.ave.pres.mod
## Split data for easier plotting
pres = occ[occ$PRESABS==1,]; dim(pres)
View(pres)
View(pres)
## Split data for easier plotting
pres <- occ[occ$PRESABS==1,]; dim(pres)
View(pres)
View(pres)
View(occ)
View(occ)
